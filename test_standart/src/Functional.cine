proc testFunctional(:results)
    rules
        final = results == TestResults
    results:test(map(@func(toLower)(UInt8), "aQs") == "aqs", builtIn_currentFile, builtIn_currentLine)
    results:test(map(@func(toLower)(UInt8), "") == "", builtIn_currentFile, builtIn_currentLine)
    results:test(map(@func(sub)(UInt64, UInt64), 1, [UInt64]{1, 3, 7, 5}) == [UInt64]{0, 2, 6, 4}, builtIn_currentFile, builtIn_currentLine)
    results:test(map(@func(sub)(UInt64, UInt64), 1, [UInt64]) == [UInt64], builtIn_currentFile, builtIn_currentLine)
    results:test(foldl(@func(sub)(UInt64, UInt64), 20, [UInt64]{1, 3, 7, 5}) == 4, builtIn_currentFile, builtIn_currentLine)
    results:test(foldl(@func(sub)(UInt64, UInt64), 20, [UInt64]) == 20, builtIn_currentFile, builtIn_currentLine)
    results:test(foldr(@func(sub)(UInt64, UInt64), 1, [UInt64]{1, 3, 7, 20}) == -14, builtIn_currentFile, builtIn_currentLine)
    results:test(foldr(@func(sub)(UInt64, UInt64), 1, [UInt64]) == 1, builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4}, "abcd") == [Pair(UInt64, UInt8)]{Pair(UInt64, UInt8).create(1, 'a'), Pair(UInt64, UInt8).create(2, 'b'), Pair(UInt64, UInt8).create(3, 'c'), Pair(UInt64, UInt8).create(4, 'd')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4}, "abcde") == [Pair(UInt64, UInt8)]{Pair(UInt64, UInt8).create(1, 'a'), Pair(UInt64, UInt8).create(2, 'b'), Pair(UInt64, UInt8).create(3, 'c'), Pair(UInt64, UInt8).create(4, 'd')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4}, "") == [Pair(UInt64, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64], "abcde") == [Pair(UInt64, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64], "") == [Pair(UInt64, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4}, "abcd", "1234") == [Triple(UInt64, UInt8, UInt8)]{Triple(UInt64, UInt8, UInt8).create(1, 'a', '1'), Triple(UInt64, UInt8, UInt8).create(2, 'b', '2'), Triple(UInt64, UInt8, UInt8).create(3, 'c', '3'), Triple(UInt64, UInt8, UInt8).create(4, 'd', '4')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4, 12}, "abcd ", "1234") == [Triple(UInt64, UInt8, UInt8)]{Triple(UInt64, UInt8, UInt8).create(1, 'a', '1'), Triple(UInt64, UInt8, UInt8).create(2, 'b', '2'), Triple(UInt64, UInt8, UInt8).create(3, 'c', '3'), Triple(UInt64, UInt8, UInt8).create(4, 'd', '4')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64], "abcd ", "1234") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4}, "", "1234") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64]{1, 2, 3, 4}, "abcd ", "") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zip([UInt64], "", "") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(add)(UInt64, UInt64), [UInt64]{1, 7, 5, 13}, [UInt64]{10, 0, 12, 1}) == [UInt64]{11, 7, 17, 14}, builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(add)(UInt64, UInt64), [UInt64]{1, 7, 5, 13}, [UInt64]) == [UInt64], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(add)(UInt64, UInt64), [UInt64], [UInt64]{10, 0, 12, 1}) == [UInt64], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(add)(UInt64, UInt64), [UInt64], [UInt64]) == [UInt64], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Pair(UInt64, UInt8), UInt64, UInt8), [Pair(UInt64, UInt8)].init(4), [UInt64]{1, 2, 3, 4}, "abcd") == [Pair(UInt64, UInt8)]{Pair(UInt64, UInt8).create(1, 'a'), Pair(UInt64, UInt8).create(2, 'b'), Pair(UInt64, UInt8).create(3, 'c'), Pair(UInt64, UInt8).create(4, 'd')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Pair(UInt64, UInt8), UInt64, UInt8), [Pair(UInt64, UInt8)].init(4), [UInt64]{1, 2, 3, 4}, "abcde") == [Pair(UInt64, UInt8)]{Pair(UInt64, UInt8).create(1, 'a'), Pair(UInt64, UInt8).create(2, 'b'), Pair(UInt64, UInt8).create(3, 'c'), Pair(UInt64, UInt8).create(4, 'd')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Pair(UInt64, UInt8), UInt64, UInt8), [Pair(UInt64, UInt8)].init(4), [UInt64]{1, 2, 3, 4}, "") == [Pair(UInt64, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Pair(UInt64, UInt8), UInt64, UInt8), [Pair(UInt64, UInt8)].init(4), [UInt64], "abcde") == [Pair(UInt64, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Pair(UInt64, UInt8), UInt64, UInt8), [Pair(UInt64, UInt8)].init(4), [UInt64], "") == [Pair(UInt64, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)].init(4), [UInt64]{1, 2, 3, 4}, "abcd", "1234") == [Triple(UInt64, UInt8, UInt8)]{Triple(UInt64, UInt8, UInt8).create(1, 'a', '1'), Triple(UInt64, UInt8, UInt8).create(2, 'b', '2'), Triple(UInt64, UInt8, UInt8).create(3, 'c', '3'), Triple(UInt64, UInt8, UInt8).create(4, 'd', '4')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)].init(4), [UInt64]{1, 2, 3, 4, 12}, "abcd", "1234") == [Triple(UInt64, UInt8, UInt8)]{Triple(UInt64, UInt8, UInt8).create(1, 'a', '1'), Triple(UInt64, UInt8, UInt8).create(2, 'b', '2'), Triple(UInt64, UInt8, UInt8).create(3, 'c', '3'), Triple(UInt64, UInt8, UInt8).create(4, 'd', '4')}, builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)], [UInt64]{1, 2, 3, 4, 12}, "abcd", "1234") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)].init(4), [UInt64], "abcd", "1234") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)].init(4), [UInt64]{1, 2, 3, 4, 12}, "", "1234") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)].init(4), [UInt64]{1, 2, 3, 4, 12}, "abcd", "") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
    results:test(zipWith(@func(create)(Triple(UInt64, UInt8, UInt8), UInt64, UInt8, UInt8), [Triple(UInt64, UInt8, UInt8)], [UInt64], "", "") == [Triple(UInt64, UInt8, UInt8)], builtIn_currentFile, builtIn_currentLine)
