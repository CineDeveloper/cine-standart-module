proc testTriple(:results)
    rules
        final = results == TestResults
    data := BinaryData
    t .= Triple(UInt64, Int8, [UInt8]).create(12, -12.convertTo(Int8), "1")
    data += t
    position := 0
    results:test(Triple(UInt64, Int8, [UInt8]).getFromBinaryData(data, position) == t, builtIn_currentFile, builtIn_currentLine)
    results:test(t == Triple(UInt64, Int8, [UInt8]).create(12, -12.convertTo(Int8), "1"), builtIn_currentFile, builtIn_currentLine)
    results:test(t != Triple(UInt64, Int8, [UInt8]).create(11, -12.convertTo(Int8), "1"), builtIn_currentFile, builtIn_currentLine)
    results:test(t != Triple(UInt64, Int8, [UInt8]).create(12, -11.convertTo(Int8), "1"), builtIn_currentFile, builtIn_currentLine)
    results:test(t != Triple(UInt64, Int8, [UInt8]).create(12, -12.convertTo(Int8), ""), builtIn_currentFile, builtIn_currentLine)
    results:test(t != Triple(UInt64, Int8, [UInt8]).create(11, -11.convertTo(Int8), ""), builtIn_currentFile, builtIn_currentLine)
    results:test((t & Triple(UInt64, Int8, [UInt8]).create(8, 1.convertTo(Int8), "0")) == Triple(UInt64, Int8, [UInt8]).create(8, Int8, "0"), builtIn_currentFile, builtIn_currentLine)
    results:test((t & Triple(UInt64, Int8, [UInt8]).create(8, 4.convertTo(Int8), "2")) == Triple(UInt64, Int8, [UInt8]).create(8, 4.convertTo(Int8), "0"), builtIn_currentFile, builtIn_currentLine)
    results:test(t.not() == Triple(UInt64, Int8, [UInt8]).create(18446744073709551603, 11.convertTo(Int8), [UInt8]{206.convertTo(UInt8)}), builtIn_currentFile, builtIn_currentLine)
    results:test((t | Triple(UInt64, Int8, [UInt8]).create(8, 1.convertTo(Int8), "2")) == Triple(UInt64, Int8, [UInt8]).create(12, -11.convertTo(Int8), "3"), builtIn_currentFile, builtIn_currentLine)
    results:test((t | Triple(UInt64, Int8, [UInt8]).create(8, 4.convertTo(Int8), "0")) == Triple(UInt64, Int8, [UInt8]).create(12, -12.convertTo(Int8), "1"), builtIn_currentFile, builtIn_currentLine)
    results:test((t << 1) == Triple(UInt64, Int8, [UInt8]).create(24, -24.convertTo(Int8), [UInt8]{98.convertTo(UInt8)}), builtIn_currentFile, builtIn_currentLine)
    results:test((t >> 1) == Triple(UInt64, Int8, [UInt8]).create(6, 122.convertTo(Int8), [UInt8]{24.convertTo(UInt8)}), builtIn_currentFile, builtIn_currentLine)
    results:test(t.toString() == "(12, -12, 1)", builtIn_currentFile, builtIn_currentLine)
    results:test((t ^ Triple(UInt64, Int8, [UInt8]).create(8, 1.convertTo(Int8), "0")) == Triple(UInt64, Int8, [UInt8]).create(4, -11.convertTo(Int8), [UInt8]{1.convertTo(UInt8)}), builtIn_currentFile, builtIn_currentLine)
    results:test((t ^ Triple(UInt64, Int8, [UInt8]).create(8, 5.convertTo(Int8), "2")) == Triple(UInt64, Int8, [UInt8]).create(4, -15.convertTo(Int8), [UInt8]{3.convertTo(UInt8)}), builtIn_currentFile, builtIn_currentLine)
