group BasicUnsignedInteger
//countAllSet(a) -> UInt8
//findFirstSet(a) -> UInt8
//toSigned(a) -> b

rules
    1 = type > BasicUnsignedInteger
    join 1 BasicInteger
    join 1 UnsignedInteger

func fromString(a > BasicUnsignedInteger, string [UInt8]) Box(a) #4
    attributes
        alwaysInline
    tenInIndexPower := 1.convertTo(#a)
    if string.getLength() != 0
        then
            resultNumber := #a
            for index := string.getLength() - 1; index != UInt64.maxValue(); index--
                if char .= string[index]; char.digit?()
                    then
                        previous .= resultNumber
                        resultNumber += (char - '0').convertTo(#a) * tenInIndexPower
                        if previous > resultNumber
                            then return
                    else return
                tenInIndexPower *= 10
            result:put(resultNumber)

func maxValue(a > BasicUnsignedInteger) a #4
    attributes
        alwaysInline
    C
        result_ = - 1;

func minValue(a > BasicUnsignedInteger) a #4
    attributes
        alwaysInline
    result = #a

func power(a > BasicUnsignedInteger, b a) a #4
    attributes
        alwaysInline
    result = 1.convertTo(#a)
    tmp := a
    power := b
    for
        if (power & 1.convertTo(#b)) == 1.convertTo(#b)
            then result *= tmp
        power >>= 1
        if power == #b
            then break
            else tmp *= tmp.clone()

func random(maxValue > BasicUnsignedInteger) maxValue #4
    attributes
        alwaysInline
    include
        #include <stdlib.h>
    flag debug is
        "enable"
            panic(maxValue == 0, "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - wrong max value.")
    C
        uint64_t randomNumber = (UINT64_MAX / RAND_MAX * rand() + rand()) / (UINT64_MAX / maxValue_);
        result_ = randomNumber;

func shl(a > BasicUnsignedInteger, shifts > BasicUnsignedInteger) a #4
    attributes
        alwaysInline
    flag debug is
        "enable"
            panic(shifts.convertTo(UInt64) >= #a.getTypeSize() * 8, "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - too many shifts.")
    C
        result_ = a_ << shifts_;

func shr(a > BasicUnsignedInteger, shifts > BasicUnsignedInteger) a #4
    attributes
        alwaysInline
    flag debug is
        "enable"
            panic(shifts.convertTo(UInt64) >= #a.getTypeSize() * 8, "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - too many shifts.")
    C
        result_ = a_ >> shifts_;

func toString(a > BasicUnsignedInteger) [UInt8] #4
    attributes
        alwaysInline
    include
        #include <string.h>
    length := #a.getTypeSize() * 3 - #a.getTypeSize() / 2
    index := length
    remain := a
    C
        char tmpResult[length_];
        for (;;){
            index_--;
            char newChar = remain_ % 10 + 48;
            remain_ /= 10;
            tmpResult[index_] = newChar;
            if (remain_ == 0){
                break;
            }
        }
        length_ -= index_;
    result = [UInt8].init(length)
    C
        memcpy(result_.items, tmpResult + index_, length_);
    result:setStringFlag()
