group BasicNumber
//require
//dec(:a)
//fromString(a, [UInt8]) -> a
//inc(:a)
//power(a, a) -> a
//toString(a) -> [UInt8]

rules
    1 = type > BasicNumber
    join 1 Number
    join 1 Ordered
    join 1 StringWriter
    join 1 StringReader

func add(a > BasicNumber, b a) a #4
    attributes
        alwaysInline
    C
        result_ = a_ + b_;

func div(a > BasicNumber, b a) a #4
    attributes
        alwaysInline
    flag debug is set?
        then debugMessage(b == 0, "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - division by zero.")
    C
        result_ = a_ / b_;

func equal(a > BasicNumber, b a) Bool #4
    attributes
        alwaysInline
    C
        result_ = a_ == b_;

func greater(a > BasicNumber, b a) Bool #4
    attributes
        alwaysInline
    C
        result_ = a_ > b_;

func greaterOrEqual(a > BasicNumber, b a) Bool #4
    attributes
        alwaysInline
    C
        result_ = a_ >= b_;

func less(a > BasicNumber, b a) Bool #4
    attributes
        alwaysInline
    C
        result_ = a_ < b_;

func lessOrEqual(a > BasicNumber, b a) Bool #4
    attributes
        alwaysInline
    C
        result_ = a_ <= b_;

func mul(a > BasicNumber, b a) a #4
    attributes
        alwaysInline
    C
        result_ = a_ * b_;

func sub(a > BasicNumber, b a) a #4
    attributes
        alwaysInline
    C
        result_ = a_ - b_;
