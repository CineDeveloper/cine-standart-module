rules
    1 = type == Float64
    join 1 BasicFloat

func abs(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = fabs(a_);

func arcCos(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    flag debug is
        "enable"
            panic(!a.inRange?(-1.0, 1.0), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - wrong value.")
    C
        result_ = acos(a_);

func arcCtg(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = (double)(M_PI) / 2.0 - atan(a_);

func arcSin(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    flag debug is
        "enable"
            panic(!a.inRange?(-1.0, 1.0), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - wrong value.")
    C
        result_ = asin(a_);

func arcTg(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = atan(a_);

func ceil(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = ceil(a_);

func cos(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = cos(a_);

func ctg(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = (double)(1.0) / tan(a_);

func disassemble(a Float64) Pair(a, a)
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_.second_ = modf(a_, &(result_.first_));

func exp(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = exp(a_);

func floor(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = floor(a_);

func fromString(a Float64, string [UInt8]) Box(a)
    attributes
        alwaysInline
    include
        #include <string.h>
    if string.getLength().inRange?(1, 312)
        then
            C
                char buf[string_.length + 1];
                memcpy(buf, string_.items, string_.length);
                buf[string_.length] = 0;
                char* endPtr;
                result_.private_item_ = strtod(buf, &endPtr);
                result_.private_haveItem_ = (uint64_t)(endPtr - buf) == string_.length;
                if (!result_.private_haveItem_) {
                    result_.private_item_ = 0.0;
                }

func lg(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = log10(a_);

func ln(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = log(a_);

func log(a Float64, base a) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = log(a_) / log(base_);

func mod(a Float64, b a) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = fmod(a_, b_);
    flag debug is
        "enable"
            panic(result.nan?(), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - result is NaN.")

func power(a Float64, b a) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = pow(a_, b_);
    flag debug is
        "enable"
            panic(result.nan?(), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - result is NaN.")

func sin(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = sin(a_);

func sqrt(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = sqrt(a_);
    flag debug is
        "enable"
            panic(result.nan?(), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - result is NaN.")

func tg(a Float64) a
    attributes
        alwaysInline
    include
        #include <math.h>
    C
        result_ = tan(a_);
