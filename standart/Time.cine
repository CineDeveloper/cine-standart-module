type Time C(8, "", "time_t", "#include <time.h>")

rules
    1 = type == Time
    join 1 Ordered
    join 1 Binary
    join 1 StringWriter

func convertTo(from, to)
    attributes
        alwaysInline
    rules
        1 = from == Time & to == UInt64
        2 = from == UInt64 & to == Time
        final = 1 | 2
        result = to
    C
        result_ = from_;

func current(timeType)
    attributes
        alwaysInline
    rules
        final = timeType == Time
        result = timeType
    C
        result_ = time(NULL);

func equal(a, b)
    attributes
        alwaysInline
    rules
        final = a == Time & a == b
        result = Bool
    C
        result_ = a_ == b_;

func greater(a, b)
    attributes
        alwaysInline
    rules
        final = a == Time & a == b
        result = Bool
    C
        result_ = a_ > b_;

func greaterOrEqual(a, b)
    attributes
        alwaysInline
    rules
        final = a == Time & a == b
        result = Bool
    C
        result_ = a_ >= b_;

func less(a, b)
    attributes
        alwaysInline
    rules
        final = a == Time & a == b
        result = Bool
    C
        result_ = a_ < b_;

func lessOrEqual(a, b)
    attributes
        alwaysInline
    rules
        final = a == Time & a == b
        result = Bool
    C
        result_ = a_ <= b_;

func toString(time)
    attributes
        alwaysInline
    include
        #include <string.h>
    rules
        final = time == Time
        result = [UInt8]
    length := 0
    C
        char* tmpString = ctime(&time_);
        length_ = strlen(tmpString) - 1;
    result = [UInt8].init(length)
    C
        memcpy(result_.items, tmpString, length_);
    result:setStringFlag()
