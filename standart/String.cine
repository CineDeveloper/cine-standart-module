func digits?(string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
        result = Bool
    parse _, char <- string
        if result = char.digit?(); !result
            then break

func letters?(string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
        result = Bool
    parse _, char <- string
        if result = char.letter?(); !result
            then break

func lower?(string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
        result = Bool
    parse _, char <- string
        if result = char.lower?(); !result
            then break

func toLower(string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
        result = string
    result = [UInt8].init(string.getLength())
    parse index, item <- string
        result:setItem(index, item.toLower())
    result:setStringFlag()

proc toLower(:string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
    parse index, item <- string
        string:setItem(index, item.toLower())

func toUpper(string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
        result = string
    result = [UInt8].init(string.getLength())
    parse index, item <- string
        result:setItem(index, item.toUpper())
    result:setStringFlag()

proc toUpper(:string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
    parse index, item <- string
        string:setItem(index, item.toUpper())

func upper?(string)
    attributes
        alwaysInline
    rules
        final = string == [UInt8]
        result = Bool
    parse _, char <- string
        if result = char.upper?(); !result
            then break
