type VAList(itemsType) C(8, link, "struct ^^ {##itemsType## items[32]; uint8_t length;}", "struct ^^", "#include <inttypes.h>")

func clone(list VAList(_)) list
    attributes
        alwaysInline
    result = list

func convertTo(list VAList(_), sliceType [list[0]]) sliceType
    attributes
        alwaysInline
    include
        #include <string.h>
    length .= list.getLength().convertTo(UInt64)
    if length != 0
        then
            result = #sliceType.init(length)
            haveLink? list[0]
                then
                    parse index, item <- list
                        result:setItem(index.convertTo(UInt64), item)
                else
                    itemSize .= #list[0].getTypeSize()
                    C
                        memcpy(result_.items, list_.items, length_ * itemSize_);

func create(listType VAList(_)) listType
    attributes
        alwaysInline
    result = #listType

func create(listType VAList(_), item listType[0]) listType
    attributes
        alwaysInline
    C
        result_.length = 1;
        result_.items[0] = item_;
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 2;
        memcpy(result_.items, (##item1##[32]){item1_, item2_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 3;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 4;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 5;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 6;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 7;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 8;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 9;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 10;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 11;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 12;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 13;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 14;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 15;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 16;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 17;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 18;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 19;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 20;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 21;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 22;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 23;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 24;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 25;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 26;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1, item27 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 27;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_, item27_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1, item27 item1, item28 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 28;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_, item27_, item28_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1, item27 item1, item28 item1, item29 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 29;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_, item27_, item28_, item29_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1, item27 item1, item28 item1, item29 item1, item30 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 30;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_, item27_, item28_, item29_, item30_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1, item27 item1, item28 item1, item29 item1, item30 item1, item31 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 31;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_, item27_, item28_, item29_, item30_, item31_}, sizeof(##item1##) * 32);
    result.use()

func create(listType VAList(_), item1 listType[0], item2 item1, item3 item1, item4 item1, item5 item1, item6 item1, item7 item1, item8 item1, item9 item1, item10 item1, item11 item1, item12 item1, item13 item1, item14 item1, item15 item1, item16 item1, item17 item1, item18 item1, item19 item1, item20 item1, item21 item1, item22 item1, item23 item1, item24 item1, item25 item1, item26 item1, item27 item1, item28 item1, item29 item1, item30 item1, item31 item1, item32 item1) listType
    attributes
        alwaysInline
    include
        #include <string.h>
    C
        result_.length = 32;
        memcpy(result_.items, (##item1##[32]){item1_, item2_, item3_, item4_, item5_, item6_, item7_, item8_, item9_, item10_, item11_, item12_, item13_, item14_, item15_, item16_, item17_, item18_, item19_, item20_, item21_, item22_, item23_, item24_, item25_, item26_, item27_, item28_, item29_, item30_, item31_, item32_}, sizeof(##item1##) * 32);
    result.use()

proc free(list VAList(_))
    for index := UInt8; index < list.getLength(); index++
        list[index].free()

func getItem(list VAList(_), index > BasicUnsignedInteger) list[0]
    attributes
        alwaysInline
    flag debug is
        "enable"
            panic(index.convertTo(UInt8) >= list.getLength(), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - the index is too large.")
    C
        result_ = list_.items[index_];
    result.use()

func getLength(list VAList(_)) UInt8
    attributes
        alwaysInline
    C
        result_ = list_.length;

func parse_first(list VAList(_)) UInt8
    attributes
        alwaysInline
    result = UInt8

func parse_haveItem?(list VAList(_), index UInt8) Bool
    attributes
        alwaysInline
    result = index < list.getLength()

func parse_item(list VAList(_), index UInt8) list[0]
    attributes
        alwaysInline
    result = list[index]

func parse_key(list VAList(_), index UInt8) UInt8
    attributes
        alwaysInline
    result = index

func parse_next(list VAList(_), index UInt8) UInt8
    attributes
        alwaysInline
    result = index + 1.convertTo(UInt8)

proc use(list VAList(_))
    attributes
        alwaysInline
    for index := UInt8; index < list.getLength(); index++
        list[index].use()
