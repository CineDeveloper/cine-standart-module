type Fluid C(8, link, "struct ^^ {uint64_t typeNumber; void* object; uint64_t* useCounter; void (*free)(void*);}", "struct ^^", "#include <inttypes.h>")

func clone(a Fluid) a
    attributes
        alwaysInline
    result = a

func empty?(fluid Fluid) Bool
    attributes
        alwaysInline
    C
        result_ = fluid_.object == (void*){0};

proc free(a Fluid)
    include
        #include <stdlib.h>
    needToFree := false
    C
        if (a_.useCounter != (uint64_t*){0}) {
            needToFree_ = *a_.useCounter < 2;
            (*a_.useCounter)--;
        }
    if needToFree
        then
            C
                a_.free(a_.object);
                free(a_.object);
                free(a_.useCounter);

func getInnerTypeNumber(a Fluid) UInt64
    attributes
        alwaysInline
    C
        result_ = a_.typeNumber;

func getItem(fluid Fluid, innerType) innerType
    attributes
        alwaysInline
    flag debug is set?
        then debugMessage(fluid.getInnerTypeNumber() != #innerType.getTypeNumber(), "File: " builtIn_currentFile ", line: " builtIn_currentLine ". UB - the inner type does not match the type being extracted.")
    C
        result_ = *(##innerType##*)(fluid_.object);
    result.use()

func item?(fluid Fluid) Bool
    attributes
        alwaysInline
    C
        result_ = fluid_.object != (void*){0};

proc unnamed(:a) #1
    attributes
        id = "private free function in fluid (standart module)"
    a.free()

func toFluid(a) Fluid
    attributes
        alwaysInline
    include
        #include <stddef.h>
        #include <stdio.h>
    a.use()
    typeNumber .= a.getTypeNumber()
    freeFunction .= builtInGetFunctionByID("private free function in fluid (standart module)", @(:a))
    C
        result_.typeNumber = typeNumber_;
        result_.object = malloc(sizeof(##a##));
        result_.useCounter = (uint64_t*)(malloc(sizeof(uint64_t)));
        if (__builtin_expect(result_.object == NULL || result_.useCounter == NULL, false)){
            fprintf(stderr, "Not enought memory.\n");
            abort();
        }
        *((##a##*)result_.object) = a_;
        *result_.useCounter = 1;
        result_.free = (void (*)(void*))freeFunction_;

proc use(a Fluid)
    attributes
        alwaysInline
    C
        if (a_.useCounter != (uint64_t*){0}) {
            (*a_.useCounter)++;
        }
